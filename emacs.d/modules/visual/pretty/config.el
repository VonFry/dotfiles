;;; pretty config -*- lexical-binding: t -*-
;; A copy from doom-emacs
;; https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/pretty-code/config.el
;;

(defcustom +pretty-code-symbols-alist '((t))
  "An alist containing a mapping of major modes to its value for
`prettify-symbols-alist'."
  :group 'vonfry-module)

(defcustom +pretty-code-symbols
  '(;; Functional
    ("lambda"        . ?λ)
    ("def"           . ?ƒ)
    ("fun"           . ?ƒ)
    ("function"      . ?ƒ)
    ("composition"   . ?∘)
    ;; Types
    ("null"          . ?∅)
    ("None"          . ?∅)
    ("true"          . ?𝕋)
    ("True"          . ?𝕋)
    ("false"         . ?𝔽)
    ("False"         . ?𝔽)
    ("int"           . ?ℤ)
    ("float"         . ?ℝ)
    ("str"           . ?𝕊)
    ("bool"          . ?𝔹)
    ("Bool"          . ?𝔹)
    ("nat"           . 8469)
    ("Real"          . 8477)
    ("Prop"          . 8473)
    ;; Flow
    ("in"            . ?∈)
    ("and"           . ?∧)
    ("or"            . ?∨)
    ("not-in"        . ?∉)
    ("for"           . ?∀)
    ("forall"        . ?∀)
    ("some"          . ?∃)
    ("exists"        . ?∃)
    ;; Other
    ("tuple"         . ?⨂)
    ("pipe"          . ?) ;; FIXME: find a non-private char
    ("dot"           . ?•)
    ;; greek
    ("Alpha"         . ?Α)
    ("Beta"          . ?Β)
    ("Gamma"         . ?Γ)
    ("Delta"         . ?Δ)
    ("Epsilon"       . ?Ε)
    ("Zeta"          . ?Ζ)
    ("Eta"           . ?Η)
    ("Theta"         . ?Θ)
    ("Iota"          . ?Ι)
    ("Kappa"         . ?Κ)
    ("Lambda"        . ?Λ)
    ("Mu"            . ?Μ)
    ("Nu"            . ?Ν)
    ("Xi"            . ?Ξ)
    ("Omicron"       . ?Ο)
    ("Pi"            . ?Π)
    ("Rho"           . ?Ρ)
    ("Sigma"         . ?Σ)
    ("Tau"           . ?Τ)
    ("Upsilon"       . ?Υ)
    ("Phi"           . ?Φ)
    ("Chi"           . ?Χ)
    ("Psi"           . ?Ψ)
    ("Omega"         . ?Ω)
    ("alpha"         . ?α)
    ("beta"          . ?β)
    ("gamma"         . ?γ)
    ("delta"         . ?δ)
    ("epsilon"       . ?ε)
    ("zeta"          . ?ζ)
    ("eta"           . ?η)
    ("theta"         . ?θ)
    ("iota"          . ?ι)
    ("kappa"         . ?κ)
    ("lambda"        . ?λ)
    ("mu"            . ?μ)
    ("nu"            . ?ν)
    ("xi"            . ?ξ)
    ("omicron"       . ?ο)
    ("pi"            . ?π)
    ("rho"           . ?ρ)
    ("sigma"         . ?σ)
    ("tau"           . ?τ)
    ("upsilon"       . ?υ)
    ("phi"           . ?φ)
    ("chi"           . ?χ)
    ("psi"           . ?ψ)
    ("omega"         . ?ω))
  "a custom pretty symbol alist"
  :group 'vonfry-module)


(defun +pretty-code--correct-symbol-bounds (ligature-alist)
  "Prepend non-breaking spaces to a ligature.
This way `compose-region' (called by `prettify-symbols-mode') will use the
correct width of the symbols instead of the width measured by `char-width'."
  (let* ((len (length (car ligature-alist)))
         (ac  (cdr ligature-alist))
         (acc (list ac)))
    (if (and (<= ac (cdr +pretty-code-ligatures-range))
             (>= ac (car +pretty-code-ligatures-range)))
      (progn
        (while (> len 1)
          (setq acc (cons ?\s (cons '(Br . Bl) acc)))
          (setq len (1- len)))
        (cons (car ligature-alist) acc))
      ligature-alist)))

(defcustom +pretty-code-enabled-modes t
  "List of major modes in which `prettify-symbols-mode' should be enabled.
If t, enable it everywhere. If the first element is 'not, enable it in any mode
besides what is listed."
  :group 'vonfry-module)

(defun +pretty-code-init-pretty-symbols-h ()
  "Enable `prettify-symbols-mode'.
If in fundamental-mode, or a mode derived from special, comint, eshell or term
modes, this function does nothing.
Otherwise it builds `prettify-code-symbols-alist' according to
`+pretty-code-symbols-alist' for the current major-mode."
  (unless (or (eq major-mode 'fundamental-mode)
              (eq (get major-mode 'mode-class) 'special)
              (derived-mode-p 'comint-mode 'eshell-mode 'term-mode))
    (when (or (eq +pretty-code-enabled-modes t)
              (if (eq (car +pretty-code-enabled-modes) 'not)
                  (not (memq major-mode (cdr +pretty-code-enabled-modes)))
                (memq major-mode +pretty-code-enabled-modes)))
      (setq prettify-symbols-alist
            (append (cdr (assq major-mode +pretty-code-symbols-alist))
                    (default-value 'prettify-symbols-alist)))
      (when prettify-symbols-mode
        (prettify-symbols-mode -1))
      (prettify-symbols-mode +1))))

(defcustom +pretty-code-symbol-font-name "Symbola"
  "Name of the Symbola code ligature font.")

(defcustom +pretty-code-ligatures-font-name "Fira Code"
  "Name of the ligature font.")

(defcustom +pretty-code-ligatures-range '(#X110000 . #X110110)
  "ligatures charset range"
  :group 'vonfry-module)

(defcustom +pretty-code-ligatures
  '(("www"               . #X11000e)
    ("**"                . #X110048)
    ("***"               . #X110049)
    ("*>"                . #X11004a)
    ("*/"                . #X11004b)
    ("{|"                . #X11004c)
    ("[|"                . #X11004d)
    ("]#"                . #X11004e)
    ("::"                . #X11004f)
    (":::"               . #X110050)
    ("::="               . #X110051)
    (":="                . #X110052)
    (":>"                . #X110053)
    (":<"                . #X110054)
    ("!!"                . #X110055)
    ("!!."               . #X110056)
    ("/="                . #X110057)
    ("!="                . #X110057)
    ("!=="               . #X110058)
    ("/=="               . #X110058)
    ("-|"                . #X110059)
    ("--"                . #X11005a)
    ("---"               . #X11005b)
    ("-->"               . #X11005c)
    ("->"                . #X11005d)
    ("->>"               . #X11005e)
    ("-<"                . #X11005f)
    ("-<<"               . #X110060)
    ("-~"                . #X110061)
    ("#{"                . #X110062)
    ("#["                . #X110063)
    ("#:"                . #X110064)
    ("#!"                . #X110065)
    ("##"                . #X110066)
    ("###"               . #X110067)
    ("####"              . #X110068)
    ("#="                . #X110069)
    ("#("                . #X11006a)
    ("#?"                . #X11006b)
    ("#_"                . #X11006c)
    ("#_("               . #X11006d)
    (".-"                . #X11006e)
    (".="                . #X11006f)
    (".."                . #X110070)
    ("..="               . #X110071)
    ("..<"               . #X110072)
    ("..."               . #X110073)
    (".?"                . #X110074)
    ("?:"                . #X110075)
    ("?="                . #X110076)
    ("?."                . #X110077)
    ("??"                . #X110078)
    (";;"                . #X110079)
    ("/*"                . #X11007a)
    ; ("/="                . #X11007b)
    ; ("/=="               . #X11007c)
    ("/>"                . #X11007d)
    ("//"                . #X11007e)
    ("///"               . #X11007f)
    ("_|_"               . #X110080)
    ("__"                . #X110081)
    ("#:"                . #X110082)
    ; (">="                . #X1100a0)
    ; ("<="                . #X1100a1)
    ("not"               . #X1100a5)
    ("&&"                . #X1100b3)
    ("||"                . #X1100b4)
    ("||>"               . #X1100b5)
    ("||="               . #X1100b6)
    ("|>"                . #X1100b7)
    ("|}"                . #X1100b8)
    ("|]"                . #X1100b9)
    ("|-"                . #X1100ba)
    ("|="                . #X1100bb)
    ("|>"                . #X1100bc)
    ("^="                . #X1100bd)
    ("$>"                . #X1100be)
    ("++"                . #X1100bf)
    ("+++"               . #X1100c0)
    ("+>"                . #X1100c1)
    ("=:="               . #X1100c2)
    ("=!="               . #X1100c3)
    ("=="                . #X1100c4)
    ("==="               . #X1100c5)
    ("==>"               . #X1100c6)
    ("=>"                . #X1100c7)
    ("=>>"               . #X1100c8)
    ("=<<"               . #X1100c9)
    ("=/="               . #X1100ca)
    (">:"                . #X1100cb)
    (">-"                . #X1100cc)
    (">->"               . #X1100cd)
    (">="                . #X1100ce)
    (">=>"               . #X1100cf)
    (">>"                . #X1100d0)
    (">>-"               . #X1100d1)
    (">>="               . #X1100d2)
    (">>>"               . #X1100d3)
    ("<*"                . #X1100d4)
    ("<*>"               . #X1100d5)
    ("<|"                . #X1100d6)
    ("<||"               . #X1100d7)
    ("<|||"              . #X1100d8)
    ("<|>"               . #X1100d9)
    ("<:"                . #X1100da)
    ("<$"                . #X1100db)
    ("<$>"               . #X1100dc)
    ("<!--"              . #X1100dd)
    ("<-"                . #X1100de)
    ("<--"               . #X1100df)
    ("<->"               . #X1100e0)
    ("<-<"               . #X1100e1)
    ("<+"                . #X1100e2)
    ("<+>"               . #X1100e3)
    ("<="                . #X1100e4)
    ("<=="               . #X1100e5)
    ("<==>"              . #X1100e6)
    ("<=>"               . #X1100e7)
    ("<=<"               . #X1100e8)
    ("<>"                . #X1100e9)
    ("<<"                . #X1100ea)
    ("<<-"               . #X1100eb)
    ("<<="               . #X1100ec)
    ("<<<"               . #X1100ed)
    ("<~"                . #X1100ee)
    ("<~>"               . #X1100ef)
    ("<~~"               . #X1100f0)
    ("</"                . #X1100f1)
    ("</>"               . #X1100f2)
    ("~@"                . #X1100f3)
    ("~-"                . #X1100f4)
    ("~="                . #X1100f5)
    ("~>"                . #X1100f6)
    ("~~"                . #X1100f7)
    ("~~>"               . #X1100f8)
    ("%%"                . #X1100f9))
  "pretty code ligatures"
  :group 'vonfry-module)

(defun +pretty-code-setup-h ()
  (dolist (charset (mapcar 'string-to-char (-filter 'stringp +pretty-code-symbols)))
    (set-fontset-font t charset
                      +pretty-code-ligatures
                      nil 'append)
    (set-fontset-font t charset
                      +pretty-code-symbol-font-name
                      nil 'append))
  (dolist (charset (mapcar 'cdr company-coq-prettify-symbols-alist))
    (set-fontset-font t charset
                      +pretty-code-symbol-font-name
                      nil 'prepend))
  (set-fontset-font t +pretty-code-ligatures-range
                    +pretty-code-ligatures-font-name
                    nil 'prepend)
  (setq-default prettify-symbols-alist
                (append prettify-symbols-alist
                        +pretty-code-symbols
                        (mapcar #'+pretty-code--correct-symbol-bounds
                                +pretty-code-ligatures))))

(defun +pretty-code-mode-with-ligatures (mode append-to &optional remove-from)
  "set mode with other ligatures with arguments append-to or remove-from. Both of
them are a list which contains alist. `(list '(ligstr . charcode))'"
  (add-hook (intern (concat (symbol-name mode) "-hook"))
            (lambda ()
              (setq prettify-symbols-alist
                    (append (mapcar #'+pretty-code--correct-symbol-bounds
                                    append-to)
                            prettify-symbols-alist))
              (mapcar (lambda (i)
                        (setq prettify-symbols-alist
                              (delete i prettify-symbols-alist))
                        nil)
                      remove-from))))
